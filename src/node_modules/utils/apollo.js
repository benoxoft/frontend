import fetch from 'node-fetch'
import ApolloClient, { gql } from 'apollo-boost'

export default new ApolloClient({
	uri: "http://qkg7t3nssg.lb.c1.gra.k8s.ovh.net/v1/graphql",
	fetch,
})

export const  SERIES_CHAPTERS = gql`
query  {
  series_chapters(limit: 25, order_by: {time_uploaded: desc}) {
    id
    title
    chapter_number_volume
    chapter_number_absolute
    time_uploaded
    views
    comments
    series_chapters_series {
      id
      name
    }
    groups_series_chapters {
      groups_scanlation_series_chapters_groups {
        name
        id
      }
    }
  }
}`

export const SERIES = gql`
	query($id: Int!) {
		series(where: {id: {_eq: $id}}, limit: 1) {
			view
			updated
			status
			raw
			rating
			name
			mu_id
			mangadex_id
			mal_id
			id
			hentai
			follows
			description
			cover_image
			country
			bw_id
			amazonjp_id
			series_chapters(limit: 25, order_by: {time_uploaded: desc}) {
				id
				title
				chapter_number_volume
				chapter_number_absolute
				time_uploaded
				views
				comments
				series_chapters_series {
					id
					name
				}
				groups_series_chapters {
					groups_scanlation_series_chapters_groups {
						name
						id
					}
				}
			}
			series_aliases {
				id
				name
			}
			people_series {
				people_series {
					id
					name
				}
				type
			}
			tags_series {
				tags_series {
					tag_name
					tag_namespace
				}
			}
			series_related {
				type
				series_related_related {
					id
					name
					cover_image
				}
			}
		}
	}
`

export const PEOPLE = gql`
	query($id: Int!) {
		people(where: {id: {_eq: $id}}, limit: 1) {
			about
			alternative_names
			description
			birthday
			family_name
			given_name
			id
			image
			mal_id
			name
			type
			updated
			url
			website
			series_people_series {
				type
				people_series_people {
					id
					name
					cover_image
				}
			}
		}
	}

`

export const USER = gql`
query($id: uuid!) {
  users(limit: 1, where: {id: {_eq: $id}}) {
    active
    avatar_url
	created_at
	default_role
    display_name
    id
    updated_at
    cover_image
  }
}

`


export const TAGS = gql`
query tags {
  tags {
    name: tag_name
    tag_namespace
    id
  }
}
`


export const SEARCH = gql`
query($hentai: Boolean!, $name: String, $status: [String!] $limit: Int!, $offset: Int!, $tags_inc: [bigint!], $tags_exc: [bigint!], $country: [String!]) {
  series(where: {tags_series: {_and: {tags_id: {_in: $tags_inc, _nin: $tags_exc}}}, country: {_in: $country}, status: {_in: $status}, hentai: {_eq: $hentai}, name: {_ilike: $name}, series_aliases: {name: {_ilike: $name}}}, limit: $limit, offset: $offset) {
	id
	name
	cover: cover_image
	description
	tags_series {
		tags_series {
			name: tag_name
		}
	}
  }
}

`
